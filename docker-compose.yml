version: '3.8'

services:
  # Web interface service
  web:
    build:
      context: .
      target: web
    image: fm-llm-solver:web
    container_name: fm-llm-web
    ports:
      - "${WEB_PORT:-5000}:5000"
    environment:
      - FM_LLM_ENV=${FM_LLM_ENV:-production}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - MATHPIX_APP_ID=${MATHPIX_APP_ID}
      - MATHPIX_APP_KEY=${MATHPIX_APP_KEY}
      - UNPAYWALL_EMAIL=${UNPAYWALL_EMAIL}
    volumes:
      - ./config:/app/config:ro
      - ./kb_data:/app/kb_data
      - ./data:/app/data
      - ./logs:/app/logs
      - web_instance:/app/instance
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - fm-llm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CLI tools service
  cli:
    build:
      context: .
      target: cli
    image: fm-llm-solver:cli
    container_name: fm-llm-cli
    environment:
      - FM_LLM_ENV=${FM_LLM_ENV:-production}
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    volumes:
      - ./config:/app/config:ro
      - ./kb_data:/app/kb_data
      - ./data:/app/data
      - ./logs:/app/logs
      - ./output:/app/output
    depends_on:
      - postgres
      - redis
    networks:
      - fm-llm-network
    profiles:
      - cli

  # Development environment
  dev:
    build:
      context: .
      target: development
    image: fm-llm-solver:dev
    container_name: fm-llm-dev
    ports:
      - "${DEV_WEB_PORT:-5001}:5000"
      - "${DEV_JUPYTER_PORT:-8888}:8888"
    environment:
      - FM_LLM_ENV=development
      - SECRET_KEY=dev-secret-key
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/1}
    volumes:
      - .:/app
      - dev_cache:/app/.pytest_cache
      - jupyter_data:/app/.jupyter
    depends_on:
      - postgres
      - redis
    networks:
      - fm-llm-network
    profiles:
      - development

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: fm-llm-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --databases 16
    restart: unless-stopped
    networks:
      - fm-llm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: fm-llm-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-fmllm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${POSTGRES_DB:-fmllm}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - fm-llm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fmllm}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: fm-llm-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - fm-llm-network
    profiles:
      - monitoring

  # Grafana dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: fm-llm-grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - fm-llm-network
    profiles:
      - monitoring

volumes:
  web_instance:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  dev_cache:
    driver: local
  jupyter_data:
    driver: local

networks:
  fm-llm-network:
    driver: bridge 