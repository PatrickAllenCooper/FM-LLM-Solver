apiVersion: v1
kind: ConfigMap
metadata:
  name: fm-llm-production-config
  namespace: fm-llm-solver
data:
  config.yaml: |
    # Production configuration for FM-LLM Solver
    app:
      name: "FM-LLM Solver"
      version: "1.0.0"
      environment: "production"
      
    # Database configuration
    database:
      primary:
        host: "postgres-service"
        port: 5432
        database: "fm_llm_production"
        username: "fm_llm_user"
        password: "${secret:DB_PASSWORD}"
        
    # Cache configuration
    cache:
      backend: "redis"
      redis_url: "redis://redis-service:6379/0"
      
    # Web interface configuration
    web_interface:
      host: "0.0.0.0"
      port: 5000
      debug: false
      base_url: "https://fmgen.net"
      
    # Modal GPU backend configuration
    deployment:
      mode: "hybrid"
      cloud:
        inference_api_url: "https://patrick-allen-cooper--fm-llm-solver-fastapi-app.modal.run"
        
    # Model configurations
    models:
      available:
        base:
          name: "Base Model"
          description: "Standard barrier certificate generation"
        finetuned:
          name: "Fine-tuned Model" 
          description: "Specialized for barrier certificates"
          
    # Security configuration
    security:
      secret_key: "${secret:SECRET_KEY}"
      rate_limit:
        free_tier: "50/day"
        premium_tier: "1000/day"
        api_tier: "5000/day"
        
  requirements.txt: |
    flask>=2.3.0
    flask-sqlalchemy>=3.0.0
    flask-login>=0.6.0
    flask-wtf>=1.1.0
    flask-migrate>=4.0.0
    werkzeug>=2.3.0
    psycopg2-binary>=2.9.0
    redis>=4.5.0
    requests>=2.31.0
    python-dotenv>=1.0.0
    gunicorn>=21.0.0
    cryptography>=41.0.0
    qrcode>=7.4.0
    pyotp>=2.8.0
    
  startup.sh: |
    #!/bin/bash
    set -e
    
    echo "üöÄ Starting FM-LLM Solver Production Web Interface"
    
    # Wait for database
    echo "‚è≥ Waiting for database..."
    while ! nc -z postgres-service 5432; do
      sleep 1
    done
    echo "‚úÖ Database is ready"
    
    # Wait for Redis  
    echo "‚è≥ Waiting for Redis..."
    while ! nc -z redis-service 6379; do
      sleep 1
    done
    echo "‚úÖ Redis is ready"
    
    # Initialize database
    echo "üîß Initializing database..."
    cd /app
    python -c "
    from web_interface.app import create_app
    from web_interface.models import db
    
    app = create_app()
    with app.app_context():
        db.create_all()
        print('‚úÖ Database initialized')
    "
    
    # Start application
    echo "üéØ Starting web application..."
    exec gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 300 "web_interface.app:create_app()"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fm-llm-web-production
  namespace: fm-llm-solver
  labels:
    app: fm-llm-web-production
    component: web-interface
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fm-llm-web-production
  template:
    metadata:
      labels:
        app: fm-llm-web-production
        component: web-interface
    spec:
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          echo "Waiting for PostgreSQL..."
          until nc -z postgres-service 5432; do
            echo "PostgreSQL is not ready yet..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          echo "Waiting for Redis..."
          until nc -z redis-service 6379; do
            echo "Redis is not ready yet..."
            sleep 2
          done
          echo "Redis is ready!"
      containers:
      - name: web
        image: python:3.11-slim
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: FLASK_ENV
          value: "production"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: fm-llm-secrets
              key: secret-key
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: fm-llm-secrets  
              key: database-url
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"
        - name: MODAL_API_URL
          value: "https://patrick-allen-cooper--fm-llm-solver-fastapi-app.modal.run"
        - name: CONFIG_PATH
          value: "/app/config/config.yaml"
        volumeMounts:
        - name: app-code
          mountPath: /app
        - name: config
          mountPath: /app/config
        - name: startup-script
          mountPath: /app/startup.sh
          subPath: startup.sh
        command: ["/bin/bash"]
        args: ["/app/startup.sh"]
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      volumes:
      - name: app-code
        persistentVolumeClaim:
          claimName: app-code-pvc
      - name: config
        configMap:
          name: fm-llm-production-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: startup-script
        configMap:
          name: fm-llm-production-config
          items:
          - key: startup.sh
            path: startup.sh
          defaultMode: 0755
---
apiVersion: v1
kind: Service
metadata:
  name: fm-llm-web-production-service
  namespace: fm-llm-solver
  labels:
    app: fm-llm-web-production
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: fm-llm-web-production
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-code-pvc
  namespace: fm-llm-solver
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: Secret
metadata:
  name: fm-llm-secrets
  namespace: fm-llm-solver
type: Opaque
stringData:
  secret-key: "your-production-secret-key-change-this"
  database-url: "postgresql://fm_llm_user:secure_password@postgres-service:5432/fm_llm_production" 