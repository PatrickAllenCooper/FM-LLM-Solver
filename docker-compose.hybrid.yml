version: '3.8'

services:
  # Redis cache service (local)
  redis:
    image: redis:7-alpine
    container_name: fm-llm-redis-hybrid
    ports:
      - "6379:6379"
    volumes:
      - redis_data_hybrid:/data
    command: redis-server --appendonly yes --databases 16
    restart: unless-stopped
    networks:
      - fm-llm-hybrid
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web interface service (local) 
  web:
    build:
      context: .
      target: web
    image: fm-llm-solver:web-hybrid
    container_name: fm-llm-web-hybrid
    ports:
      - "${WEB_PORT:-5000}:5000"
    environment:
      - FM_LLM_ENV=production
      - DEPLOYMENT_MODE=hybrid
      - SECRET_KEY=${SECRET_KEY}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Database configuration
      - DATABASE_URL=${DATABASE_URL:-sqlite:///instance/production.db}
      - REDIS_URL=redis://redis:6379/0
      
      # API Keys for enhanced functionality
      - MATHPIX_APP_ID=${MATHPIX_APP_ID}
      - MATHPIX_APP_KEY=${MATHPIX_APP_KEY}
      - UNPAYWALL_EMAIL=${UNPAYWALL_EMAIL}
      - SEMANTIC_SCHOLAR_API_KEY=${SEMANTIC_SCHOLAR_API_KEY}
      
      # Inference API (Modal or cloud endpoint)
      - INFERENCE_API_URL=${INFERENCE_API_URL}
      - INFERENCE_API_KEY=${INFERENCE_API_KEY}
      
      # Security and performance settings
      - CORS_ENABLED=${CORS_ENABLED:-true}
      - RATE_LIMIT_ENABLED=${RATE_LIMIT_ENABLED:-true}
      - RATE_LIMIT_DEFAULT=${RATE_LIMIT_DEFAULT:-100/day}
      - RATE_LIMIT_API=${RATE_LIMIT_API:-1000/hour}
      - CACHE_TTL=${CACHE_TTL:-3600}
      - BATCH_SIZE=${BATCH_SIZE:-5}
      - MODEL_CACHE_DIR=${MODEL_CACHE_DIR:-/tmp/models}
      
      # User account system settings
      - USER_REGISTRATION_ENABLED=${USER_REGISTRATION_ENABLED:-true}
      - EMAIL_VERIFICATION_REQUIRED=${EMAIL_VERIFICATION_REQUIRED:-false}
      - PASSWORD_RESET_ENABLED=${PASSWORD_RESET_ENABLED:-true}
      - TWO_FACTOR_AUTH_ENABLED=${TWO_FACTOR_AUTH_ENABLED:-true}
      - SESSION_TIMEOUT_HOURS=${SESSION_TIMEOUT_HOURS:-24}
      - API_KEY_EXPIRY_DAYS=${API_KEY_EXPIRY_DAYS:-365}
      
      # Email settings (for user notifications)
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_USE_TLS=${SMTP_USE_TLS:-true}
      - FROM_EMAIL=${FROM_EMAIL:-noreply@fm-llm-solver.com}
      
      # Analytics and monitoring
      - ANALYTICS_ENABLED=${ANALYTICS_ENABLED:-true}
      - ACTIVITY_LOGGING_ENABLED=${ACTIVITY_LOGGING_ENABLED:-true}
      - SECURITY_LOGGING_ENABLED=${SECURITY_LOGGING_ENABLED:-true}
      - USER_METRICS_ENABLED=${USER_METRICS_ENABLED:-true}
      
      # File storage (for user exports, etc.)
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-/app/uploads}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}  # 16MB
      - ALLOWED_EXTENSIONS=${ALLOWED_EXTENSIONS:-txt,pdf,json}
      
      # Subscription and billing (for future premium features)
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SUBSCRIPTION_PLANS_ENABLED=${SUBSCRIPTION_PLANS_ENABLED:-false}
      
    volumes:
      - ./instance:/app/instance
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - web_data_hybrid:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fm-llm-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Database service (PostgreSQL for production)
  postgres:
    image: postgres:15-alpine
    container_name: fm-llm-postgres-hybrid
    environment:
      - POSTGRES_DB=fmllm
      - POSTGRES_USER=fmllm
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data_hybrid:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fm-llm-hybrid
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fmllm -d fmllm"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - postgres  # Only start if explicitly requested

  # Optional: Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: fm-llm-prometheus-hybrid
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_hybrid:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fm-llm-hybrid
    restart: unless-stopped
    profiles:
      - monitoring  # Only start if explicitly requested

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fm-llm-grafana-hybrid
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
    volumes:
      - grafana_data_hybrid:/var/lib/grafana
    networks:
      - fm-llm-hybrid
    restart: unless-stopped
    profiles:
      - monitoring  # Only start if explicitly requested

volumes:
  redis_data_hybrid:
    driver: local
  postgres_data_hybrid:
    driver: local
  web_data_hybrid:
    driver: local
  prometheus_data_hybrid:
    driver: local
  grafana_data_hybrid:
    driver: local

networks:
  fm-llm-hybrid:
    driver: bridge

# Profiles for optional services:
# Start basic setup: docker-compose up
# Start with PostgreSQL: docker-compose --profile postgres up
# Start with monitoring: docker-compose --profile monitoring up
# Start everything: docker-compose --profile postgres --profile monitoring up 