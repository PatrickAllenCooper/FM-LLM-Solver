[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fm-llm-solver"
version = "1.0.0"
description = "Barrier certificate generation for dynamical systems using Large Language Models"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Patrick Allen Cooper", email = "patrick.cooper@colorado.edu"},
]
keywords = [
    "barrier certificates",
    "dynamical systems", 
    "formal methods",
    "large language models",
    "verification",
    "control theory"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

dependencies = [
    "pydantic>=2.0.0",
    "PyYAML>=6.0",
    "numpy>=1.24.0",
    "sympy>=1.12",
    "torch>=2.0.0",
    "transformers>=4.35.0",
    "Flask>=3.0.0",
    "SQLAlchemy>=2.0.0",
    "requests>=2.31.0",
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.12.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]
web = [
    "Flask-SQLAlchemy>=3.1.0",
    "Flask-Login>=0.6.3",
    "Flask-Limiter>=3.5.0",
    "Flask-CORS>=4.0.0",
    "Flask-Migrate>=4.0.0",
    "Flask-WTF>=1.2.0",
    "redis>=5.0.0",
    "gunicorn>=21.2.0",
]
api = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-multipart>=0.0.6",
]
rag = [
    "faiss-cpu>=1.7.4",
    "sentence-transformers>=2.2.0",
    "langchain>=0.1.0",
    "langchain-community>=0.1.0",
    "pypdf>=3.17.0",
    "unstructured>=0.10.0",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "GPUtil>=1.4.0",
]
gpu = [
    "faiss-gpu>=1.7.4",
    "flash-attn>=2.3.0",
    "bitsandbytes>=0.41.0",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/FM-LLM-Solver"
Documentation = "https://fm-llm-solver.readthedocs.io"
Repository = "https://github.com/yourusername/FM-LLM-Solver.git"
Issues = "https://github.com/yourusername/FM-LLM-Solver/issues"

[project.scripts]
fm-llm-solver = "run_application:main"
fmllm = "run_application:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["fm_llm_solver*"]
exclude = ["tests*", "docs*", "scripts*"]

[tool.setuptools.package-data]
fm_llm_solver = [
    "web/templates/**/*.html",
    "web/static/**/*",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "tests/",
    "scripts/",
    "migrations/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["fm_llm_solver"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 