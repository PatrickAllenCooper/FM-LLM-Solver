Guidance Document:

Note this document is your North Star for this project. This is your core guidance. We want to implement the project exactly as it is specified here.

We are trying to design a complete end to end experimental pipeline for testing and verifying the behavior of barrier certificates and Lyapunov functions which were generated by LLMs. The idea here is to allow us to get through to the other side with a complete experimental pipeline that allows us to fine-tune on papers intended for the study of formal methods in accordance with their various topics, ie, discrete time vs continuous time etc using the various IDs of the researchers we would like to include in this training dataset. Finally, we would like a web interface branded for CU Boulder with the following characteristics. It must retain a complete history of all queries and requests for the generation of barrier certificates and Lyapunov functions. Likewise it should have a login system for users which I may authorize. Both the experimental defined approach here and the web interface should be hosted via GCP and modal. We should have hard limits on costs per user to prevent cost overrun as well as a hard limit on the budget applied to the entire project.

We want the user to be able to select the models we have fine-tuned when they begin passing queries into the interface. We also want them to be able to select generic models such as Claude or ChatGPT. The idea being that those models, while not being hosted via modal, should be called via the standard API. Finally, we want the models to have the option to perform RAG, this will require creating a vector search of the available paper we are using for fine tuning. Note that the user should be able to define these vector retrieval datasets for RAG by defining the criteria for the dataset, IE, researcher IDs used and topics within the papers, discrete vs continuous etc.

Note we want the user to be able to interface with the LLM either in a "direct generation" or "conversational" manner with the option for a generation later.

Finally, we want a robust series of checks, both symbolic and numerical performed on the generated lyapunov and barrier certificates to be performed after each generation is created. Note that extracting the generated certificate in a manner such that it can be symbolically parsed may require extensive work. All of this should be implemented via a clean web interface using the most up to date version of google's material design. Likewise, there should be an API defined that authorized users can call to perform all the core functions described here. This will be hosted via GCP. Note that we have a modern git repo here that does perform git action checks when new code is pushed, these should be kept up to date and passing. Finally, robust checks are necessary to keep you on track during your development process. Keep things simple, elegant and professional, do not add or modify the capabilities as they are specified here.

We want everything to cleanly deploy to GCP in an elegant way whenever we push our code.

Please verify that all capabilities described here are contained and professionally implemented in this repo. Test all that is described here. Note we want to be careful not to introduce redundant or messy code, always be refining and removing redundancy. Streamline.