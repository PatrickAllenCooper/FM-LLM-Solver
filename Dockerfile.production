# Production Dockerfile for FM-LLM Solver Web Interface
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    netcat-traditional \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements first for better caching
COPY requirements.txt /app/
COPY web_interface/requirements.txt /app/web_requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r web_requirements.txt

# Additional dependencies for the full web interface
RUN pip install --no-cache-dir \
    flask>=2.3.0 \
    flask-sqlalchemy>=3.0.0 \
    flask-login>=0.6.0 \
    flask-wtf>=1.1.0 \
    flask-migrate>=4.0.0 \
    werkzeug>=2.3.0 \
    psycopg2-binary>=2.9.0 \
    redis>=4.5.0 \
    python-dotenv>=1.0.0 \
    gunicorn>=21.0.0 \
    cryptography>=41.0.0 \
    qrcode>=7.4.0 \
    pyotp>=2.8.0 \
    flask-cors>=4.0.0

# Copy the entire project
COPY . /app/

# Create necessary directories
RUN mkdir -p /app/instance /app/logs /app/uploads

# Set proper permissions
RUN chown -R www-data:www-data /app
USER www-data

# Environment variables
ENV FLASK_APP=web_interface.app:create_app
ENV FLASK_ENV=production
ENV PYTHONPATH=/app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Start script
COPY docker-entrypoint.sh /app/
USER root
RUN chmod +x /app/docker-entrypoint.sh
USER www-data

CMD ["/app/docker-entrypoint.sh"] 