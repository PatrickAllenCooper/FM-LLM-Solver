# FM-LLM Solver - Staging Environment Overrides
# Staging balances development flexibility with production-like settings

# ============================================================================
# Environment Settings (Staging)
# ============================================================================
environment:
  mode: staging
  debug: false
  log_level: INFO

# ============================================================================
# Database (Staging - PostgreSQL with debugging)
# ============================================================================
database:
  url: "${ENV:STAGING_DATABASE_URL:postgresql://fmllm:changeme@localhost:5432/fmllm_staging}"
  
  # Staging connection pool settings
  pool_size: 10
  max_overflow: 15
  
  # Show SQL in staging for debugging
  echo: true

# ============================================================================
# Cache (Staging - Redis enabled)
# ============================================================================
cache:
  enabled: true
  url: "${ENV:STAGING_REDIS_URL:redis://localhost:6379/2}"
  key_prefix: "fmllm:staging:"

# ============================================================================
# Web Interface (Staging - Relaxed but secure)
# ============================================================================
web:
  host: "0.0.0.0"
  port: 5000
  
  # Moderate security for staging
  csrf_enabled: true
  session_timeout: 3600  # 1 hour
  max_content_length: 73400320  # 70MB
  
  # Allow registration for testing
  enable_registration: true
  enable_api_keys: true
  default_subscription: premium  # Higher limits for testing
  
  # Moderate rate limiting
  rate_limit:
    enabled: true
    default: "200 per hour"
    api: "2000 per hour"
    burst: "20 per minute"

# ============================================================================
# Inference (Staging - Hybrid mode for testing)
# ============================================================================
inference:
  host: "0.0.0.0"
  port: 8000
  timeout: 600
  
  # Can use Modal staging environment
  api_url: "${ENV:STAGING_INFERENCE_API_URL:}"

# ============================================================================
# Models (Staging - Production models with relaxed settings)
# ============================================================================
models:
  base:
    name: "Qwen/Qwen2.5-14B-Instruct"
    max_new_tokens: 512
    temperature: 0.1  # Slightly higher than production for testing variety

# ============================================================================
# Performance (Staging - Balanced settings)
# ============================================================================
performance:
  cuda:
    visible_devices: "${ENV:CUDA_VISIBLE_DEVICES:0}"
    memory_config: "max_split_size_mb:512"
  
  cpu_workers: 4
  max_memory: 16
  
  model_cache_size: 2

# ============================================================================
# Deployment (Staging - Testing hybrid deployment)
# ============================================================================
deployment:
  mode: hybrid  # Test hybrid deployment in staging
  
  services:
    web:
      workers: 4
      timeout: 120
      
    inference:
      enabled: false  # Use Modal for testing
      
    database:
      host: "${ENV:STAGING_DB_HOST:localhost}"
      port: "${ENV:STAGING_DB_PORT:5432}"
      
    redis:
      host: "${ENV:STAGING_REDIS_HOST:localhost}"
      port: "${ENV:STAGING_REDIS_PORT:6379}"

# ============================================================================
# Monitoring (Staging - Full monitoring for testing)
# ============================================================================
monitoring:
  metrics_enabled: true
  metrics_port: 9091  # Different port from production
  
  # Health checks
  health_check_interval: 30
  health_check_timeout: 10
  
  # Performance tracking enabled for testing
  track_generation_time: true
  track_memory_usage: true
  track_gpu_usage: true

# ============================================================================
# Security (Staging - Moderate security)
# ============================================================================
security:
  # CORS - More permissive for testing
  cors_origins: "${ENV:STAGING_CORS_ORIGINS:*}"
  
  # CSP enabled for testing
  csp_enabled: true
  
  # API Security
  api_rate_limit: "1000 per hour"
  
  # Moderate password policy
  password_min_length: 8
  password_require_special: true

# ============================================================================
# Feature Flags (Staging - Test new features)
# ============================================================================
features:
  # Enable new features for testing
  enable_conversation_mode: true
  enable_batch_processing: true  # Test experimental features
  enable_model_comparison: true
  enable_verification_service: true
  
  # UI features
  enable_dark_mode: true
  enable_advanced_settings: true  # Full UI for testing
  enable_export_formats: ["json", "latex", "pdf"]

# ============================================================================
# Staging-Specific Settings
# ============================================================================
staging:
  # Test data settings
  use_test_data: true
  reset_on_deploy: false
  
  # Debugging
  enable_debug_endpoints: true
  log_all_requests: true
  
  # Performance testing
  enable_load_testing: true
  synthetic_load: false 