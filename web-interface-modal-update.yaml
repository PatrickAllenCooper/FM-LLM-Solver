apiVersion: v1
kind: ConfigMap
metadata:
  name: modal-config
  namespace: fm-llm-solver
data:
  simple-app-modal.py: |
    #!/usr/bin/env python3
    """
    FM-LLM Web Application with Modal GPU Backend Integration
    """
    import os
    import sys
    import json
    import requests
    from flask import Flask, render_template, request, jsonify, redirect, url_for
    
    app = Flask(__name__)
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
    
    # Modal API configuration
    MODAL_API_URL = os.environ.get('MODAL_API_URL', 'https://yourworkspace--fm-llm-solver.modal.run')
    
    @app.route('/health')
    def health():
        """Health check endpoint for Kubernetes."""
        return {'status': 'healthy', 'service': 'fm-llm-web', 'backend': 'modal'}, 200
    
    @app.route('/ready')
    def ready():
        """Readiness check that also tests Modal backend."""
        try:
            response = requests.get(f"{MODAL_API_URL}/health", timeout=10)
            if response.status_code == 200:
                backend_status = "connected"
            else:
                backend_status = "error"
        except:
            backend_status = "disconnected"
        
        return {
            'status': 'ready', 
            'service': 'fm-llm-web',
            'backend': backend_status,
            'modal_url': MODAL_API_URL
        }, 200

    @app.route('/')
    def index():
        """Main page with live backend status."""
        # Check Modal backend status
        try:
            response = requests.get(f"{MODAL_API_URL}/health", timeout=5)
            if response.status_code == 200:
                backend_info = response.json()
                backend_status = "üü¢ Connected"
                gpu_status = "‚úÖ Available" if backend_info.get('gpu_available') else "‚ùå Not Available"
                models_status = f"‚úÖ {len(backend_info.get('models_loaded', []))} loaded" if backend_info.get('models_loaded') else "‚ö†Ô∏è Loading..."
            else:
                backend_status = "üü° Error"
                gpu_status = "‚ùì Unknown"
                models_status = "‚ùì Unknown"
        except:
            backend_status = "üî¥ Disconnected"
            gpu_status = "‚ùì Unknown"
            models_status = "‚ùì Unknown"
        
        return f'''
        <!DOCTYPE html>
        <html>
        <head>
            <title>FM-LLM Solver - Production</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body {{
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1000px;
                    margin: 0 auto;
                    padding: 20px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    min-height: 100vh;
                }}
                .container {{
                    background: white;
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                }}
                h1 {{
                    color: #2c3e50;
                    text-align: center;
                    margin-bottom: 30px;
                    font-size: 2.5em;
                }}
                .status-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 30px 0;
                }}
                .status-card {{
                    padding: 20px;
                    border-radius: 10px;
                    background: #f8f9fa;
                    border-left: 4px solid #007bff;
                }}
                .status-card.success {{
                    border-left-color: #28a745;
                    background: #d4edda;
                }}
                .status-card.warning {{
                    border-left-color: #ffc107;
                    background: #fff3cd;
                }}
                .status-card.error {{
                    border-left-color: #dc3545;
                    background: #f8d7da;
                }}
                .demo-section {{
                    margin: 30px 0;
                    padding: 25px;
                    background: #e3f2fd;
                    border-radius: 10px;
                }}
                .btn {{
                    background: #007bff;
                    color: white;
                    padding: 12px 24px;
                    border: none;
                    border-radius: 6px;
                    cursor: pointer;
                    text-decoration: none;
                    display: inline-block;
                    margin: 5px;
                    font-size: 16px;
                }}
                .btn:hover {{
                    background: #0056b3;
                    transform: translateY(-1px);
                }}
                .btn.success {{
                    background: #28a745;
                }}
                .btn.success:hover {{
                    background: #1e7e34;
                }}
                textarea {{
                    width: 100%;
                    height: 120px;
                    padding: 15px;
                    border: 2px solid #ddd;
                    border-radius: 8px;
                    font-family: monospace;
                    resize: vertical;
                }}
                .result-box {{
                    margin: 20px 0;
                    padding: 20px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border: 1px solid #dee2e6;
                    display: none;
                }}
                .loading {{
                    text-align: center;
                    padding: 20px;
                }}
                .spinner {{
                    border: 4px solid #f3f3f3;
                    border-top: 4px solid #3498db;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    animation: spin 2s linear infinite;
                    margin: 0 auto;
                }}
                @keyframes spin {{
                    0% {{ transform: rotate(0deg); }}
                    100% {{ transform: rotate(360deg); }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üöÄ FM-LLM Solver</h1>
                <p style="text-align: center; font-size: 1.2em; color: #666;">
                    Production-Ready Barrier Certificate Generation
                </p>
                
                <div class="status-grid">
                    <div class="status-card success">
                        <h3>üåê Web Interface</h3>
                        <p><strong>Status:</strong> ‚úÖ Running</p>
                        <p><strong>Domain:</strong> fmgen.net</p>
                        <p><strong>Environment:</strong> Production</p>
                    </div>
                    <div class="status-card {'success' if 'Connected' in backend_status else 'error'}">
                        <h3>üî• GPU Backend</h3>
                        <p><strong>Status:</strong> {backend_status}</p>
                        <p><strong>GPU:</strong> {gpu_status}</p>
                        <p><strong>Models:</strong> {models_status}</p>
                    </div>
                    <div class="status-card success">
                        <h3>‚ö° Infrastructure</h3>
                        <p><strong>Platform:</strong> GKE + Modal</p>
                        <p><strong>Scaling:</strong> Auto-scaling</p>
                        <p><strong>Region:</strong> US Central</p>
                    </div>
                </div>
                
                <div class="demo-section">
                    <h2>üßÆ Try Barrier Certificate Generation</h2>
                    <p>Enter a system description to generate a barrier certificate using our GPU-accelerated AI:</p>
                    
                    <form id="generateForm">
                        <textarea id="systemDescription" placeholder="Example: Linear system dx/dt = Ax + Bu with initial set x ‚àà [0,1]¬≤ and unsafe set x ‚àà [3,4]¬≤">Linear system dx/dt = Ax + Bu where A = [[-1, 0], [0, -1]], initial set x ‚àà [0, 0.5]¬≤, unsafe set x ‚àà [2, 3]¬≤</textarea>
                        <br>
                        <button type="submit" class="btn success">üöÄ Generate Certificate</button>
                        <button type="button" class="btn" onclick="clearResults()">üîÑ Clear</button>
                    </form>
                    
                    <div id="loadingBox" class="result-box">
                        <div class="loading">
                            <div class="spinner"></div>
                            <p>Generating barrier certificate on GPU...</p>
                        </div>
                    </div>
                    
                    <div id="resultBox" class="result-box">
                        <h3>Generated Barrier Certificate:</h3>
                        <div id="certificateResult"></div>
                        <details>
                            <summary>View Full LLM Output</summary>
                            <pre id="fullOutput"></pre>
                        </details>
                    </div>
                </div>
                
                <div style="text-align: center; margin-top: 30px;">
                    <a href="/health" class="btn">üîç Health Check</a>
                    <a href="/ready" class="btn">‚ö° Backend Status</a>
                    <a href="#" onclick="testConnection()" class="btn">üß™ Test Connection</a>
                </div>
                
                <div style="text-align: center; margin-top: 20px; color: #6c757d; font-size: 0.9em;">
                    FM-LLM Solver v1.0 ‚Ä¢ GPU-Accelerated ‚Ä¢ Production Ready
                </div>
            </div>

            <script>
                document.getElementById('generateForm').addEventListener('submit', async function(e) {{
                    e.preventDefault();
                    
                    const systemDescription = document.getElementById('systemDescription').value.trim();
                    if (!systemDescription) {{
                        alert('Please enter a system description');
                        return;
                    }}
                    
                    // Show loading
                    document.getElementById('loadingBox').style.display = 'block';
                    document.getElementById('resultBox').style.display = 'none';
                    
                    try {{
                        const response = await fetch('/api/generate', {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }},
                            body: JSON.stringify({{
                                system_description: systemDescription,
                                model_config: 'base',
                                rag_k: 3
                            }})
                        }});
                        
                        const result = await response.json();
                        
                        document.getElementById('loadingBox').style.display = 'none';
                        
                        if (result.success) {{
                            document.getElementById('certificateResult').innerHTML = 
                                `<code style="background: #e9ecef; padding: 10px; border-radius: 5px; display: block;">${{result.certificate || 'Generated successfully!'}}</code>
                                <p><strong>Processing Time:</strong> ${{result.processing_time?.toFixed(2) || 'N/A'}}s</p>
                                <p><strong>Context Chunks:</strong> ${{result.context_chunks || 0}}</p>`;
                            document.getElementById('fullOutput').textContent = result.llm_output || 'No detailed output available';
                            document.getElementById('resultBox').style.display = 'block';
                        }} else {{
                            document.getElementById('certificateResult').innerHTML = 
                                `<div style="color: #dc3545; padding: 10px; background: #f8d7da; border-radius: 5px;">
                                    <strong>Error:</strong> ${{result.error || 'Unknown error occurred'}}
                                </div>`;
                            document.getElementById('resultBox').style.display = 'block';
                        }}
                    }} catch (error) {{
                        document.getElementById('loadingBox').style.display = 'none';
                        document.getElementById('certificateResult').innerHTML = 
                            `<div style="color: #dc3545; padding: 10px; background: #f8d7da; border-radius: 5px;">
                                <strong>Network Error:</strong> ${{error.message}}
                            </div>`;
                        document.getElementById('resultBox').style.display = 'block';
                    }}
                }});
                
                function clearResults() {{
                    document.getElementById('systemDescription').value = '';
                    document.getElementById('resultBox').style.display = 'none';
                    document.getElementById('loadingBox').style.display = 'none';
                }}
                
                async function testConnection() {{
                    try {{
                        const response = await fetch('{MODAL_API_URL}/health');
                        const result = await response.json();
                        alert(`Backend Status: ${{result.status}}\\nGPU Available: ${{result.gpu_available}}\\nModels: ${{result.models_loaded.join(', ') || 'None'}}`);
                    }} catch (error) {{
                        alert(`Connection Error: ${{error.message}}`);
                    }}
                }}
            </script>
        </body>
        </html>
        '''

    @app.route('/api/generate', methods=['POST'])
    def api_generate():
        """Proxy API endpoint that forwards requests to Modal."""
        try:
            data = request.get_json()
            
            # Forward request to Modal API
            response = requests.post(
                f"{MODAL_API_URL}/generate",
                json=data,
                timeout=300  # 5 minute timeout for generation
            )
            
            if response.status_code == 200:
                return jsonify(response.json())
            else:
                return jsonify({
                    "success": False,
                    "error": f"Backend error: {response.status_code} - {response.text[:200]}"
                }), response.status_code
                
        except requests.Timeout:
            return jsonify({
                "success": False,
                "error": "Request timeout - generation took too long"
            }), 504
        except Exception as e:
            return jsonify({
                "success": False,
                "error": f"Connection error: {str(e)}"
            }), 500

    if __name__ == '__main__':
        port = int(os.environ.get('PORT', 5000))
        host = os.environ.get('HOST', '0.0.0.0')
        
        print(f"üöÄ Starting FM-LLM Solver Web Interface")
        print(f"üìç Host: {host}:{port}")
        print(f"üîó Modal Backend: {MODAL_API_URL}")
        print(f"‚úÖ Ready to serve requests!")
        
        app.run(host=host, port=port, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fm-llm-web-modal
  namespace: fm-llm-solver
  labels:
    app: fm-llm-web-modal
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fm-llm-web-modal
  template:
    metadata:
      labels:
        app: fm-llm-web-modal
    spec:
      containers:
      - name: web
        image: python:3.11-slim
        ports:
        - containerPort: 5000
        command: ["/bin/sh"]
        args: ["-c", "pip install flask requests && python /app/simple-app-modal.py"]
        env:
        - name: MODAL_API_URL
          value: "https://patrick-allen-cooper--fm-llm-solver-fastapi-app.modal.run"
        - name: PORT
          value: "5000"
        - name: HOST
          value: "0.0.0.0"
        volumeMounts:
        - name: app-script
          mountPath: /app
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      volumes:
      - name: app-script
        configMap:
          name: modal-config
---
apiVersion: v1
kind: Service
metadata:
  name: fm-llm-web-modal-service
  namespace: fm-llm-solver
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  selector:
    app: fm-llm-web-modal 