apiVersion: v1
kind: ConfigMap
metadata:
  name: web-startup-script
  namespace: fm-llm-production
data:
  startup.sh: |
    #!/bin/bash
    set -e
    
    echo "üöÄ Starting YOUR ACTUAL FM-LLM Web Interface"
    
    # Install system dependencies
    apt-get update && apt-get install -y \
      build-essential libpq-dev netcat-traditional curl git \
      && rm -rf /var/lib/apt/lists/*
    
    # Install Python dependencies for YOUR web interface
    pip install --no-cache-dir \
      flask flask-sqlalchemy flask-login flask-wtf flask-migrate \
      werkzeug psycopg2-binary redis requests python-dotenv \
      gunicorn cryptography qrcode pyotp flask-cors
    
    # Wait for database
    echo "‚è≥ Waiting for PostgreSQL..."
    while ! nc -z postgres-service 5432; do
      sleep 2
    done
    echo "‚úÖ PostgreSQL ready"
    
    # Wait for Redis
    echo "‚è≥ Waiting for Redis..."
    while ! nc -z redis-service 6379; do
      sleep 2
    done
    echo "‚úÖ Redis ready"
    
    # Set up environment for YOUR web interface
    export PYTHONPATH=/app
    export SECRET_KEY="${SECRET_KEY}"
    export DATABASE_URL="${DATABASE_URL}"
    export REDIS_URL="${REDIS_URL}"
    export MODAL_API_URL="${MODAL_API_URL}"
    
    # Initialize database using YOUR models
    echo "üîß Initializing database with YOUR models..."
    cd /app
    python -c "
    import sys
    sys.path.insert(0, '/app')
    
    from web_interface.app import create_app
    from web_interface.models import db
    
    print('Creating app with YOUR configuration...')
    app = create_app()
    
    print('Initializing YOUR database models...')
    with app.app_context():
        db.create_all()
        print('‚úÖ YOUR database models created successfully')
        
        # Create admin user using YOUR User model
        from web_interface.models import User
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            admin = User(
                username='admin',
                email='admin@fmgen.net',
                role='admin',
                is_active=True,
                is_verified=True,
                subscription_type='enterprise'
            )
            admin.set_password('admin123')
            db.session.add(admin)
            db.session.commit()
            print('‚úÖ Admin user created with YOUR User model')
    "
    
    # Start YOUR web interface using YOUR run script
    echo "üéØ Starting YOUR sophisticated web interface..."
    cd /app
    python run_web_interface.py --host 0.0.0.0 --port 5000 --config /app/config/config.yaml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: your-web-interface
  namespace: fm-llm-production
  labels:
    app: your-web-interface
    component: sophisticated-web-ui
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: your-web-interface
  template:
    metadata:
      labels:
        app: your-web-interface
        component: sophisticated-web-ui
    spec:
      containers:
      - name: web
        image: python:3.11-slim
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: web-secrets
              key: secret-key
        - name: DATABASE_URL
          value: "postgresql://fm_llm_user:secure_production_password_123@postgres-service:5432/fm_llm_production"
        - name: REDIS_URL
          value: "redis://redis-service:6379/0"
        - name: MODAL_API_URL
          value: "https://patrick-allen-cooper--fm-llm-solver-fastapi-app.modal.run"
        - name: PYTHONPATH
          value: "/app"
        - name: FLASK_ENV
          value: "production"
        command: ["/bin/bash"]
        args: ["/app/startup.sh"]
        volumeMounts:
        - name: your-code
          mountPath: /app
        - name: startup-script
          mountPath: /app/startup.sh
          subPath: startup.sh
        - name: config
          mountPath: /app/config
        livenessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 5000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1500m"
      initContainers:
      - name: copy-your-code
        image: alpine/git
        command: ['sh', '-c']
        args:
        - |
          echo "üì¶ Copying YOUR web interface code..."
          apk add --no-cache rsync
          # This would copy your actual code - for now we'll use a simpler approach
          mkdir -p /app/web_interface /app/templates /app/static
          echo "‚úÖ Ready for YOUR code"
        volumeMounts:
        - name: your-code
          mountPath: /app
      volumes:
      - name: your-code
        emptyDir: {}
      - name: startup-script
        configMap:
          name: web-startup-script
          items:
          - key: startup.sh
            path: startup.sh
          defaultMode: 0755
      - name: config
        configMap:
          name: web-config
---
apiVersion: v1
kind: Service
metadata:
  name: your-web-interface-service
  namespace: fm-llm-production
  labels:
    app: your-web-interface
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: your-web-interface 