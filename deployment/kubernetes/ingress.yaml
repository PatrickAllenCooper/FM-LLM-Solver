apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fm-llm-solver-ingress
  namespace: fm-llm-solver
  labels:
    app: fm-llm-solver
  annotations:
    # NGINX Ingress Controller annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://fmgen.net, https://www.fmgen.net, https://staging.fmgen.net"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Content-Type, Authorization, X-Requested-With, X-CSRF-Token"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/load-balance: "round_robin"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Client body size
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - fmgen.net
    - www.fmgen.net
    secretName: fmgen-net-tls
  - hosts:
    - staging.fmgen.net
    secretName: staging-fmgen-net-tls
  - hosts:
    - dev.fmgen.net
    secretName: dev-fmgen-net-tls
  rules:
  # Production - fmgen.net
  - host: fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service
            port:
              number: 80
  # Production - www.fmgen.net (redirect to main)
  - host: www.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service
            port:
              number: 80
  # Staging - staging.fmgen.net
  - host: staging.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service-staging
            port:
              number: 80
  # Development - dev.fmgen.net
  - host: dev.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service-dev
            port:
              number: 80

---
# Production ingress (separate for cleaner management)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fm-llm-solver-production-ingress
  namespace: fm-llm-solver-prod
  labels:
    app: fm-llm-solver
    environment: production
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "200"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # Production security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options DENY always;
      add_header X-Content-Type-Options nosniff always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';" always;
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - fmgen.net
    - www.fmgen.net
    secretName: fmgen-net-prod-tls
  rules:
  - host: fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service
            port:
              number: 80
  - host: www.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service
            port:
              number: 80

---
# Staging ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fm-llm-solver-staging-ingress
  namespace: fm-llm-solver-staging
  labels:
    app: fm-llm-solver
    environment: staging
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "150"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - staging.fmgen.net
    secretName: staging-fmgen-net-tls
  rules:
  - host: staging.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-solver-web-service
            port:
              number: 80
---
# Monitoring Ingress (optional, for Prometheus/Grafana)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fm-llm-solver-monitoring-ingress
  namespace: fm-llm-solver
  labels:
    app: fm-llm-solver
    component: monitoring
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-auth
    nginx.ingress.kubernetes.io/auth-realm: "Authentication Required - Monitoring"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - monitoring.fm-llm-solver.your-domain.com
    secretName: fm-llm-solver-monitoring-tls
  rules:
  - host: monitoring.fm-llm-solver.your-domain.com
    http:
      paths:
      - path: /prometheus
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
      - path: /grafana
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
---
# Basic auth secret for monitoring endpoints
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-auth
  namespace: fm-llm-solver
  labels:
    app: fm-llm-solver
    component: monitoring
type: Opaque
data:
  # admin:password (change in production)
  # Generated with: htpasswd -nb admin password | base64
  auth: YWRtaW46JGFwcjEkSDZublBtOTQkQ2VWclFqZUUudjN5TFlCVVZPUk9SMQO= 