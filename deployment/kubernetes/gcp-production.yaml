apiVersion: apps/v1
kind: Deployment
metadata:
  name: fm-llm-web
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
    cost-center: web-tier
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: fm-llm-web
  template:
    metadata:
      labels:
        app: fm-llm-web
        version: production
        cost-center: web-tier
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: web-app
        image: ${WEB_IMAGE}
        ports:
        - containerPort: 5000
          name: http
        env:
        - name: DEPLOYMENT_MODE
          value: "gcp-production"
        - name: ENVIRONMENT
          value: "production"
        - name: DOMAIN
          value: "fmgen.net"
        - name: INFERENCE_API_URL
          value: "https://fm-llm-inference-${PROJECT_ID}.run.app"
        - name: DATABASE_URL
          value: "postgresql://$(DB_USERNAME):$(DB_PASSWORD)@127.0.0.1:5432/$(DB_DATABASE)"
        - name: REDIS_URL
          value: "redis://${REDIS_HOST}:${REDIS_PORT}/0"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: secret-key
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: encryption-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: jwt-secret
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: database
        - name: USER_QUOTA_ENABLED
          value: "true"
        - name: COST_TRACKING_ENABLED
          value: "true"
        - name: AUTO_SCALING_ENABLED
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 5000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.33.2
        command:
        - "/cloud_sql_proxy"
        - "-instances=${SQL_CONNECTION_NAME}=tcp:5432"
        - "-credential_file=/secrets/cloudsql/key.json"
        - "-log_debug_stdout"
        securityContext:
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: cloudsql-key
          mountPath: /secrets/cloudsql
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      volumes:
      - name: cloudsql-key
        secret:
          secretName: cloudsql-key
          defaultMode: 0400
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir:
          sizeLimit: 1Gi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - fm-llm-web
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "cloud.google.com/gke-preemptible"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: fm-llm-web-service
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    cloud.google.com/backend-config: '{"default": "fm-llm-backend-config"}'
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
    name: http
  selector:
    app: fm-llm-web
---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: fm-llm-backend-config
  namespace: fm-llm-prod
spec:
  healthCheck:
    checkIntervalSec: 10
    timeoutSec: 5
    healthyThreshold: 1
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
    port: 5000
  connectionDraining:
    drainingTimeoutSec: 30
  timeoutSec: 30
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fm-llm-ingress
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "50"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-rps: "10"
    nginx.ingress.kubernetes.io/limit-connections: "20"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/use-gzip: "true"
    nginx.ingress.kubernetes.io/server-tokens: "false"
    nginx.ingress.kubernetes.io/hide-headers: "Server,X-Powered-By"
    nginx.ingress.kubernetes.io/add-base-url: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls:
  - hosts:
    - fmgen.net
    - www.fmgen.net
    secretName: fmgen-net-tls
  rules:
  - host: fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-web-service
            port:
              number: 80
  - host: www.fmgen.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fm-llm-web-service
            port:
              number: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: fm-llm-web-hpa
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: fm-llm-web
  minReplicas: 1
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-quotas-config
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
data:
  quotas.yaml: |
    user_quotas:
      free_tier:
        daily_requests: 50
        monthly_requests: 1000
        max_concurrent: 1
        max_inference_time: 30
        priority: low
      premium_tier:
        daily_requests: 200
        monthly_requests: 5000
        max_concurrent: 3
        max_inference_time: 60
        priority: normal
      enterprise_tier:
        daily_requests: 1000
        monthly_requests: 20000
        max_concurrent: 10
        max_inference_time: 120
        priority: high
    
    cost_controls:
      max_inference_time: 120
      auto_scale_down_minutes: 5
      budget_alert_threshold: 80
      cost_per_request_limit: 0.01
      daily_cost_limit: 10.00
      monthly_cost_limit: 100.00
    
    rate_limiting:
      requests_per_minute: 10
      burst_limit: 20
      window_size: "1m"
      block_duration: "5m"
    
    monitoring:
      enable_cost_tracking: true
      enable_usage_analytics: true
      enable_performance_monitoring: true
      log_level: "INFO"
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: fm-llm-web-pdb
  namespace: fm-llm-prod
  labels:
    app: fm-llm-web
    version: production
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: fm-llm-web
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: fm-llm-resource-quota
  namespace: fm-llm-prod
spec:
  hard:
    requests.cpu: "8000m"
    requests.memory: "20Gi"
    limits.cpu: "16000m"
    limits.memory: "40Gi"
    requests.nvidia.com/gpu: "2"
    limits.nvidia.com/gpu: "2"
    persistentvolumeclaims: "10"
    services: "20"
    secrets: "50"
    configmaps: "50"
---
apiVersion: v1
kind: LimitRange
metadata:
  name: fm-llm-limit-range
  namespace: fm-llm-prod
spec:
  limits:
  - default:
      cpu: "500m"
      memory: "512Mi"
      ephemeral-storage: "2Gi"
    defaultRequest:
      cpu: "250m"
      memory: "256Mi"
      ephemeral-storage: "1Gi"
    type: Container
  - max:
      cpu: "2000m"
      memory: "4Gi"
      ephemeral-storage: "10Gi"
    min:
      cpu: "100m"
      memory: "128Mi"
      ephemeral-storage: "500Mi"
    type: Container 