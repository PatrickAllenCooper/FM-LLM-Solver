# FM-LLM Solver - Unified Docker Compose Configuration
# Consolidates: docker-compose.yml, docker-compose.hybrid.yml, docker-compose.simple.yml
#
# Profiles:
#   local      - Full local stack (web + inference + services)
#   hybrid     - Web + services locally, inference via Modal
#   simple     - Web interface only
#   development- Development environment with all tools
#   production - Production-ready configuration
#   services   - Just the supporting services (postgres, redis, monitoring)
#
# Usage:
#   docker-compose --profile local up          # Full local stack
#   docker-compose --profile hybrid up         # Hybrid deployment
#   docker-compose --profile simple up         # Simple web only
#   docker-compose --profile development up    # Development environment
#   docker-compose --profile production up     # Production stack

version: '3.9'

# ============================================================================
# Networks
# ============================================================================
networks:
  fm-llm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# Volumes
# ============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_instance:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  model_cache:
    driver: local
  kb_data:
    driver: local
  jupyter_data:
    driver: local

# ============================================================================
# Services
# ============================================================================
services:

  # ==========================================================================
  # Core Application Services
  # ==========================================================================
  
  # Web Interface
  web:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.unified
      target: web
    image: fm-llm-solver:web
    container_name: fm-llm-web
    environment:
      - FM_LLM_ENV=${FM_LLM_ENV:-development}
      - DEPLOYMENT_MODE=${DEPLOYMENT_MODE:-local}
      - DATABASE_URL=postgresql://fmllm:${POSTGRES_PASSWORD:-changeme}@postgres:5432/fmllm
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key}
      - MATHPIX_APP_ID=${MATHPIX_APP_ID:-}
      - MATHPIX_APP_KEY=${MATHPIX_APP_KEY:-}
      - INFERENCE_API_URL=${INFERENCE_API_URL:-http://inference:8000}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    ports:
      - "${WEB_PORT:-5000}:5000"
    volumes:
      - app_instance:/app/instance
      - app_logs:/app/logs
      - app_cache:/app/cache
      - kb_data:/app/kb_data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["local", "hybrid", "simple", "development", "production"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Inference API (for local and development profiles)
  inference:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.unified
      target: inference
    image: fm-llm-solver:inference
    container_name: fm-llm-inference
    environment:
      - FM_LLM_ENV=${FM_LLM_ENV:-development}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      - REDIS_URL=redis://redis:6379/0
      - MODEL_CACHE_DIR=/app/models
    ports:
      - "${INFERENCE_PORT:-8000}:8000"
    volumes:
      - model_cache:/app/models
      - app_logs:/app/logs
      - kb_data:/app/kb_data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["local", "development", "production"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Development Environment
  development:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.unified
      target: development
    image: fm-llm-solver:development
    container_name: fm-llm-dev
    environment:
      - FM_LLM_ENV=development
      - DEPLOYMENT_MODE=local
      - DATABASE_URL=postgresql://fmllm:${POSTGRES_PASSWORD:-changeme}@postgres:5432/fmllm_dev
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY=dev-secret-key
      - FLASK_ENV=development
      - FLASK_DEBUG=1
    ports:
      - "${DEV_WEB_PORT:-5001}:5000"
      - "${DEV_INFERENCE_PORT:-8001}:8000"
      - "${JUPYTER_PORT:-8888}:8888"
    volumes:
      - ../..:/app  # Mount source code for development
      - app_instance:/app/instance
      - app_logs:/app/logs
      - model_cache:/app/models
      - kb_data:/app/kb_data
      - jupyter_data:/home/fmllm/.jupyter
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["development"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s

  # ==========================================================================
  # Supporting Services
  # ==========================================================================

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fm-llm-postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-fmllm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - POSTGRES_DB=${POSTGRES_DB:-fmllm}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["local", "hybrid", "development", "production", "services"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fmllm}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fm-llm-redis
    command: redis-server --appendonly yes --databases 16
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["local", "hybrid", "simple", "development", "production", "services"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================================================
  # Monitoring Services
  # ==========================================================================

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fm-llm-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["production", "monitoring"]

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fm-llm-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["production", "monitoring"]

  # ==========================================================================
  # Utility Services
  # ==========================================================================

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fm-llm-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@fm-llm.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["development", "utilities"]
    depends_on:
      - postgres

  # Redis Commander for cache management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fm-llm-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - fm-llm-network
    restart: unless-stopped
    profiles: ["development", "utilities"]
    depends_on:
      - redis

  # Additional volumes for monitoring and utilities
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local 