# Dockerfile for YOUR ACTUAL sophisticated web interface
FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    libpq-dev \
    netcat-traditional \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Python dependencies for YOUR web interface
RUN pip install --no-cache-dir \
    flask>=2.3.0 \
    flask-sqlalchemy>=3.0.0 \
    flask-login>=0.6.0 \
    flask-wtf>=1.1.0 \
    flask-migrate>=4.0.0 \
    werkzeug>=2.3.0 \
    psycopg2-binary>=2.9.0 \
    redis>=4.5.0 \
    requests>=2.31.0 \
    python-dotenv>=1.0.0 \
    gunicorn>=21.0.0 \
    cryptography>=41.0.0 \
    qrcode>=7.4.0 \
    pyotp>=2.8.0 \
    flask-cors>=4.0.0

# Copy YOUR ENTIRE project (all your sophisticated code)
COPY . /app/

# Create necessary directories
RUN mkdir -p /app/instance /app/logs /app/uploads /app/static /app/config

# Set proper permissions
RUN chown -R www-data:www-data /app

# Environment variables
ENV FLASK_APP=web_interface.app:create_app
ENV FLASK_ENV=production
ENV PYTHONPATH=/app

# Create startup script for YOUR web interface
COPY <<EOF /app/start-your-web-interface.sh
#!/bin/bash
set -e

echo "🚀 Starting YOUR ACTUAL FM-LLM Solver Web Interface"

# Wait for database
echo "⏳ Waiting for PostgreSQL..."
while ! nc -z \${DB_HOST:-postgres-service} \${DB_PORT:-5432}; do
  echo "PostgreSQL is not ready yet..."
  sleep 2
done
echo "✅ PostgreSQL is ready"

# Wait for Redis
echo "⏳ Waiting for Redis..."
while ! nc -z \${REDIS_HOST:-redis-service} \${REDIS_PORT:-6379}; do
  echo "Redis is not ready yet..."
  sleep 2
done
echo "✅ Redis is ready"

# Initialize database using YOUR models
echo "🔧 Initializing database with YOUR sophisticated models..."
python -c "
import sys
sys.path.insert(0, '/app')

from web_interface.app import create_app
from web_interface.models import db

print('Creating Flask app with YOUR configuration...')
app = create_app()

print('Initializing YOUR database models...')
with app.app_context():
    db.create_all()
    print('✅ YOUR database tables created')
    
    # Create admin user using YOUR User model
    from web_interface.models import User
    admin = User.query.filter_by(username='admin').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@fmgen.net',
            role='admin',
            is_active=True,
            is_verified=True,
            subscription_type='enterprise'
        )
        admin.set_password('admin123')  # Change this!
        db.session.add(admin)
        db.session.commit()
        print('✅ Admin user created with YOUR User model')
"

# Start YOUR web interface using YOUR run script
echo "🎯 Starting YOUR sophisticated web interface..."
cd /app
exec python run_web_interface.py --host 0.0.0.0 --port 5000
EOF

RUN chmod +x /app/start-your-web-interface.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/ || exit 1

# Expose port
EXPOSE 5000

# Use YOUR startup script
CMD ["/app/start-your-web-interface.sh"] 