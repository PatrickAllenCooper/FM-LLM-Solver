name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION_DEFAULT: '3.10'

jobs:
  # Code Quality and Testing
  test:
    name: Test and Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r web_requirements.txt
        if [ -f requirements/requirements.txt ]; then pip install -r requirements/requirements.txt; fi
        # Install project with development and web dependencies
        pip install -e ".[dev,web,monitoring]"

    - name: Set up test environment
      run: |
        export FM_LLM_ENV=testing
        export DB_PASSWORD=test
        export SECRET_KEY=test-secret-key
        export REDIS_URL=redis://localhost:6379/0

    - name: Run code formatting check
      run: |
        black --check --diff fm_llm_solver/ tests/

    - name: Run critical linting checks
      run: |
        flake8 fm_llm_solver/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run type checking
      if: matrix.python-version != '3.8'  # Skip mypy on Python 3.8 due to compatibility issues
      run: |
        mypy fm_llm_solver/ --ignore-missing-imports --no-strict-optional

    - name: Run unit tests
      env:
        FM_LLM_ENV: testing
        DB_PASSWORD: test
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        pytest tests/unit/ -v --cov=fm_llm_solver --cov-report=xml --cov-report=term-missing

    - name: Run integration tests
      env:
        FM_LLM_ENV: testing
        DB_PASSWORD: test
        SECRET_KEY: test-secret-key
        REDIS_URL: redis://localhost:6379/0
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        pytest tests/integration/ -v --cov=fm_llm_solver --cov-append --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  # Build and Push Container Images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push web image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: web
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push CLI image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: cli
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cli-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Deploy to staging
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|image: fm-llm-solver:web|image: ${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/web-app.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/kubernetes/namespace.yaml
        kubectl apply -f deployment/kubernetes/secrets.yaml
        kubectl apply -f deployment/kubernetes/configmap.yaml
        kubectl apply -f deployment/kubernetes/postgres.yaml
        kubectl apply -f deployment/kubernetes/redis.yaml
        kubectl apply -f deployment/kubernetes/web-app.yaml
        kubectl apply -f deployment/kubernetes/ingress.yaml
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/fm-llm-solver-web -n fm-llm-solver

    - name: Run smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 30
        
        # Run basic health check
        STAGING_URL="${{ vars.STAGING_URL || 'https://staging.fm-llm-solver.example.com' }}"
        curl -f "${STAGING_URL}/health" || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Deploy to production
      run: |
        # Update image tag in Kubernetes manifests
        sed -i "s|image: fm-llm-solver:web|image: ${{ needs.build.outputs.image-tag }}|g" deployment/kubernetes/web-app.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f deployment/kubernetes/namespace.yaml
        kubectl apply -f deployment/kubernetes/secrets.yaml
        kubectl apply -f deployment/kubernetes/configmap.yaml
        kubectl apply -f deployment/kubernetes/postgres.yaml
        kubectl apply -f deployment/kubernetes/redis.yaml
        kubectl apply -f deployment/kubernetes/web-app.yaml
        kubectl apply -f deployment/kubernetes/ingress.yaml
        
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=600s deployment/fm-llm-solver-web -n fm-llm-solver

    - name: Run production smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 60
        
        # Run comprehensive health checks
        PRODUCTION_URL="${{ vars.PRODUCTION_URL || 'https://fm-llm-solver.example.com' }}"
        curl -f "${PRODUCTION_URL}/health" || exit 1
        curl -f "${PRODUCTION_URL}/api/health" || exit 1

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: "✅ Successfully deployed FM-LLM-Solver ${{ github.event.release.tag_name }} to production"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        text: "❌ Failed to deploy FM-LLM-Solver ${{ github.event.release.tag_name }} to production"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run load tests
      run: |
        # Install k6
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
        # Run performance tests
        k6 run --out json=results.json tests/performance/load-test.js

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: results.json 