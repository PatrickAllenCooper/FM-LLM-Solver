name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Generate changelog and prepare release
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if this is a prerelease (contains alpha, beta, rc, etc.)
            if [[ "$VERSION" =~ -(alpha|beta|rc|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog..."
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, generating full changelog"
            COMMIT_RANGE=""
          else
            echo "Previous tag: $PREVIOUS_TAG"
            COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          fi
          
          # Generate changelog content
          cat > CHANGELOG_TEMP.md << 'EOF'
          ## What's Changed
          
          ### üöÄ Features
          EOF
          
          # Get commits with feat: prefix
          git log $COMMIT_RANGE --pretty=format:"- %s" --grep="feat:" --grep="feature:" | head -20 >> CHANGELOG_TEMP.md || true
          
          cat >> CHANGELOG_TEMP.md << 'EOF'
          
          ### üêõ Bug Fixes
          EOF
          
          # Get commits with fix: prefix
          git log $COMMIT_RANGE --pretty=format:"- %s" --grep="fix:" --grep="bug:" | head -20 >> CHANGELOG_TEMP.md || true
          
          cat >> CHANGELOG_TEMP.md << 'EOF'
          
          ### üîß Improvements
          EOF
          
          # Get commits with other improvement prefixes
          git log $COMMIT_RANGE --pretty=format:"- %s" --grep="chore:" --grep="refactor:" --grep="perf:" --grep="improve:" | head -10 >> CHANGELOG_TEMP.md || true
          
          cat >> CHANGELOG_TEMP.md << 'EOF'
          
          ### üìö Documentation
          EOF
          
          # Get commits with docs: prefix
          git log $COMMIT_RANGE --pretty=format:"- %s" --grep="docs:" --grep="doc:" | head -10 >> CHANGELOG_TEMP.md || true
          
          # If no specific categories, fall back to recent commits
          if [ $(wc -l < CHANGELOG_TEMP.md) -lt 10 ]; then
            echo "" > CHANGELOG_TEMP.md
            echo "### Recent Changes" >> CHANGELOG_TEMP.md
            git log $COMMIT_RANGE --pretty=format:"- %s" --max-count=20 >> CHANGELOG_TEMP.md || true
          fi
          
          # Clean up empty sections
          sed -i '/^### /N;/\n$/d' CHANGELOG_TEMP.md
          
          # Store changelog for later use
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Generated changelog:"
          cat CHANGELOG_TEMP.md

  # Build and test before release
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine
          pip install -r requirements.txt
          pip install -e ".[dev,web,monitoring]"
      
      - name: Run tests
        run: |
          pytest tests/unit/ --cov=fm_llm_solver
      
      - name: Build distribution
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      
      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push CLI image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: cli
          push: true
          tags: ghcr.io/${{ github.repository }}:cli-${{ needs.prepare-release.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

  # Create GitHub release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, build-docker]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: ${{ needs.prepare-release.outputs.version }}
          body: |
            # FM-LLM-Solver ${{ needs.prepare-release.outputs.version }}
            
            ${{ needs.prepare-release.outputs.changelog }}
            
            ## üê≥ Docker Images
            
            ```bash
            # Web interface
            docker pull ghcr.io/${{ github.repository }}:${{ needs.prepare-release.outputs.version }}
            
            # CLI tools
            docker pull ghcr.io/${{ github.repository }}:cli-${{ needs.prepare-release.outputs.version }}
            ```
            
            ## üì¶ Installation
            
            ### Using pip
            ```bash
            pip install fm-llm-solver==${{ needs.prepare-release.outputs.version }}
            ```
            
            ### Using Docker
            ```bash
            ./deploy_simple.sh
            ```
            
            ### From source
            ```bash
            git clone https://github.com/${{ github.repository }}.git
            cd FM-LLM-Solver
            git checkout ${{ needs.prepare-release.outputs.version }}
            pip install -e .
            ```
            
            ## üîó Quick Links
            
            - [üìñ Documentation](https://github.com/${{ github.repository }}/tree/${{ needs.prepare-release.outputs.version }}/docs)
            - [üöÄ Quick Start Guide](https://github.com/${{ github.repository }}/blob/${{ needs.prepare-release.outputs.version }}/QUICK_START_GUIDE.md)
            - [üêõ Report Issues](https://github.com/${{ github.repository }}/issues/new/choose)
            
            ---
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ needs.prepare-release.outputs.version }}
          files: dist/*
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease == 'true' }}
          generate_release_notes: false
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify release completion
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: success()
    steps:
      - name: Create announcement issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.prepare-release.outputs.version }}';
            const isPrerelease = '${{ needs.prepare-release.outputs.is-prerelease }}' === 'true';
            
            const title = `üéâ ${isPrerelease ? 'Pre-release' : 'Release'} ${version} is now available!`;
            const body = `
            ## ${isPrerelease ? 'üöß Pre-release' : 'üéâ Release'} ${version}
            
            We're excited to announce that FM-LLM-Solver ${version} is now available!
            
            ### üöÄ Quick Start
            
            \`\`\`bash
            # Install with pip
            pip install fm-llm-solver==${version.replace('v', '')}
            
            # Or use Docker
            docker pull ghcr.io/${{ github.repository }}:${version}
            
            # One-command deployment
            curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/deploy_simple.sh | bash
            \`\`\`
            
            ### üìã What's New
            
            ${{ needs.prepare-release.outputs.changelog }}
            
            ### üîó Links
            
            - [üì• Download Release](https://github.com/${{ github.repository }}/releases/tag/${version})
            - [üìñ Documentation](https://github.com/${{ github.repository }}/tree/${version}/docs)
            - [üöÄ Quick Start Guide](https://github.com/${{ github.repository }}/blob/${version}/QUICK_START_GUIDE.md)
            
            ${isPrerelease ? 
              '‚ö†Ô∏è **Note**: This is a pre-release version. Please test thoroughly before using in production.' : 
              '‚úÖ This is a stable release ready for production use.'
            }
            
            ---
            
            Thank you to all contributors who made this release possible! üôè
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release', 'announcement', isPrerelease ? 'prerelease' : 'stable']
            }); 