name: Label Manager

on:
  pull_request:
    types: [opened, edited, synchronize]
  issues:
    types: [opened, edited]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  auto-label:
    name: Auto-label PRs and Issues
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        
      - name: Auto-label based on files changed
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get files changed in PR
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const labels = new Set();
            
            // Analyze files and add appropriate labels
            for (const file of files) {
              const path = file.filename;
              
              // Core functionality
              if (path.startsWith('fm_llm_solver/core/')) {
                labels.add('core');
              }
              
              // Web interface
              if (path.startsWith('fm_llm_solver/web/') || path.startsWith('web_interface/')) {
                labels.add('web');
              }
              
              // Services
              if (path.startsWith('fm_llm_solver/services/')) {
                labels.add('services');
              }
              
              // Tests
              if (path.startsWith('tests/')) {
                labels.add('tests');
              }
              
              // Documentation
              if (path.startsWith('docs/') || path.endsWith('.md')) {
                labels.add('documentation');
              }
              
              // CI/CD
              if (path.startsWith('.github/') || path.includes('docker') || path.includes('deploy')) {
                labels.add('ci-cd');
              }
              
              // Configuration
              if (path.includes('config') || path.endsWith('.yml') || path.endsWith('.yaml')) {
                labels.add('configuration');
              }
              
              // Dependencies
              if (path.includes('requirements') || path === 'pyproject.toml' || path === 'setup.py') {
                labels.add('dependencies');
              }
            }
            
            // Add size labels based on changes
            const totalChanges = pr.additions + pr.deletions;
            if (totalChanges < 50) {
              labels.add('size/small');
            } else if (totalChanges < 200) {
              labels.add('size/medium');
            } else if (totalChanges < 500) {
              labels.add('size/large');
            } else {
              labels.add('size/extra-large');
            }
            
            // Add priority based on keywords in title/description
            const text = (pr.title + ' ' + (pr.body || '')).toLowerCase();
            if (text.includes('critical') || text.includes('urgent') || text.includes('hotfix')) {
              labels.add('priority/high');
            } else if (text.includes('bug') || text.includes('fix') || text.includes('error')) {
              labels.add('priority/medium');
            }
            
            // Add type labels
            if (text.includes('feat') || text.includes('feature') || text.includes('add')) {
              labels.add('type/enhancement');
            } else if (text.includes('fix') || text.includes('bug')) {
              labels.add('type/bug');
            } else if (text.includes('doc') || text.includes('readme')) {
              labels.add('type/documentation');
            } else if (text.includes('refactor') || text.includes('cleanup')) {
              labels.add('type/refactor');
            }
            
            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: Array.from(labels)
              });
            }
            
      - name: Auto-label issues
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const text = (issue.title + ' ' + (issue.body || '')).toLowerCase();
            const labels = new Set();
            
            // Bug reports
            if (text.includes('bug') || text.includes('error') || text.includes('fail') || 
                text.includes('broken') || text.includes('crash')) {
              labels.add('type/bug');
            }
            
            // Feature requests
            if (text.includes('feature') || text.includes('enhancement') || text.includes('add') || 
                text.includes('improve') || text.includes('support')) {
              labels.add('type/enhancement');
            }
            
            // Questions
            if (text.includes('question') || text.includes('how') || text.includes('help') || 
                text.includes('support')) {
              labels.add('type/question');
            }
            
            // Documentation
            if (text.includes('doc') || text.includes('readme') || text.includes('guide')) {
              labels.add('type/documentation');
            }
            
            // Priority based on keywords
            if (text.includes('critical') || text.includes('urgent') || text.includes('severe')) {
              labels.add('priority/high');
            } else if (text.includes('important') || text.includes('blocking')) {
              labels.add('priority/medium');
            } else {
              labels.add('priority/low');
            }
            
            // Area labels based on content
            if (text.includes('web') || text.includes('interface') || text.includes('ui')) {
              labels.add('area/web');
            }
            if (text.includes('api') || text.includes('service')) {
              labels.add('area/api');
            }
            if (text.includes('deploy') || text.includes('docker') || text.includes('ci')) {
              labels.add('area/deployment');
            }
            if (text.includes('test') || text.includes('testing')) {
              labels.add('area/testing');
            }
            if (text.includes('performance') || text.includes('slow') || text.includes('speed')) {
              labels.add('area/performance');
            }
            
            // Apply labels
            if (labels.size > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: Array.from(labels)
              });
            } 