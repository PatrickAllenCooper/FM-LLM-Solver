name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # Quick checks that should pass before running expensive tests
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper diff
      
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const additions = pr.additions;
            const deletions = pr.deletions;
            const changedFiles = files.length;
            
            let comment = `## PR Size Analysis\n\n`;
            comment += `- **Files changed**: ${changedFiles}\n`;
            comment += `- **Lines added**: ${additions}\n`;
            comment += `- **Lines deleted**: ${deletions}\n`;
            comment += `- **Total changes**: ${additions + deletions}\n\n`;
            
            if (additions + deletions > 1000) {
              comment += `⚠️ **Warning**: This is a large PR with ${additions + deletions} total changes. Consider breaking it into smaller PRs for easier review.\n`;
            } else if (additions + deletions > 500) {
              comment += `ℹ️ **Note**: This PR has ${additions + deletions} changes. Make sure all changes are related to the same feature/fix.\n`;
            } else {
              comment += `✅ PR size looks good!\n`;
            }
            
            // Find and update or create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('PR Size Analysis')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }
      
      - name: Check for merge conflicts
        run: |
          git fetch origin ${{ github.base_ref }}
          if ! git merge-tree $(git merge-base HEAD origin/${{ github.base_ref }}) HEAD origin/${{ github.base_ref }} | grep -q "<<<<<<< "; then
            echo "✅ No merge conflicts detected"
          else
            echo "❌ Merge conflicts detected"
            exit 1
          fi

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy pylint
      
      - name: Format check with black
        id: black
        run: |
          black --check --diff fm_llm_solver/ tests/ || echo "formatting_failed=true" >> $GITHUB_OUTPUT
      
      - name: Lint with flake8
        id: flake8
        run: |
          flake8 fm_llm_solver/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "critical_errors=true" >> $GITHUB_OUTPUT
          flake8 fm_llm_solver/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
      
      - name: Type check with mypy
        id: mypy
        continue-on-error: true
        run: |
          mypy fm_llm_solver/ --ignore-missing-imports --no-strict-optional
      
      - name: Comment PR with quality results
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const blackFailed = '${{ steps.black.outputs.formatting_failed }}' === 'true';
            const flake8Failed = '${{ steps.flake8.outputs.critical_errors }}' === 'true';
            
            let comment = `## Code Quality Report\n\n`;
            comment += `| Check | Status |\n`;
            comment += `|-------|--------|\n`;
            comment += `| Black (formatting) | ${blackFailed ? '❌ Failed' : '✅ Passed'} |\n`;
            comment += `| Flake8 (linting) | ${flake8Failed ? '❌ Critical errors' : '✅ No critical errors'} |\n`;
            comment += `| Mypy (type checking) | ℹ️ See logs for details |\n\n`;
            
            if (blackFailed) {
              comment += `### Formatting Issues\n`;
              comment += `Run \`black fm_llm_solver/ tests/\` to fix formatting issues.\n\n`;
            }
            
            // Update or create comment
            const pr = context.payload.pull_request;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Code Quality Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }

  # Test coverage report
  test-coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: pre-checks
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r web_requirements.txt
          pip install -e ".[dev,web,monitoring]"
      
      - name: Run tests with coverage
        env:
          FM_LLM_ENV: testing
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest --cov=fm_llm_solver --cov-report=xml --cov-report=term --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: PR-${{ github.event.pull_request.number }}
      
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
      
      - name: Comment coverage summary
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            let coverageText = '## Test Coverage Report\n\n';
            
            try {
              // Read coverage report (would need to parse XML or capture stdout)
              coverageText += `Coverage reports have been uploaded to Codecov.\n`;
              coverageText += `[View detailed report](https://codecov.io/gh/${{ github.repository }}/pull/${{ github.event.pull_request.number }})\n`;
            } catch (error) {
              coverageText += `⚠️ Could not generate coverage summary.\n`;
            }
            
            // Update or create comment
            const pr = context.payload.pull_request;
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: coverageText
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: coverageText
              });
            }

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e ".[docs]"
      
      - name: Build documentation
        run: |
          cd docs
          sphinx-build -W -b html . _build/html
      
      - name: Check for broken links
        run: |
          cd docs
          sphinx-build -b linkcheck . _build/linkcheck || true
      
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docs-build
          path: docs/_build/

  # Final status check
  pr-status:
    name: PR Status Summary
    runs-on: ubuntu-latest
    needs: [quality, test-coverage, docs-check]
    if: always()
    steps:
      - name: Summarize PR status
        uses: actions/github-script@v7
        with:
          script: |
            const needs = context.payload.workflow_run ? 
              context.payload.workflow_run.jobs : 
              { quality: { conclusion: 'success' }, 
                'test-coverage': { conclusion: 'success' }, 
                'docs-check': { conclusion: 'success' } };
            
            let summary = `## PR Status Summary\n\n`;
            summary += `All checks have completed. See individual check results above for details.\n\n`;
            summary += `### Quick Actions\n`;
            summary += `- 🔄 Re-run failed checks by pushing a new commit\n`;
            summary += `- 💬 Ask questions in the comments\n`;
            summary += `- 📝 Update the PR description if needed\n`;
            
            const pr = context.payload.pull_request;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: summary
            }); 