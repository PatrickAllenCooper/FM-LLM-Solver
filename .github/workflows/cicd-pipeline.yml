name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ development, staging, main ]
  pull_request:
    branches: [ development, staging, main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail (emergency only)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # ==================== QUALITY & SECURITY GATES ====================
  
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit black flake8 mypy bandit safety
        pip install -r requirements.txt
        
    - name: Run pre-commit hooks
      run: pre-commit run --all-files --show-diff-on-failure
      
    - name: Code formatting (Black)
      run: black --check --diff .
      
    - name: Linting (Flake8)
      run: flake8 . --count --statistics
      
    - name: Type checking (MyPy)
      run: mypy fm_llm_solver/ --ignore-missing-imports
      continue-on-error: true
      
    - name: Security scan (Bandit)
      run: bandit -r fm_llm_solver/ -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Dependency vulnerability scan (Safety)
      run: safety check --json --output safety-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ==================== COMPREHENSIVE TESTING ====================
  
  test-matrix:
    name: Test Suite (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: code-quality
    if: always() && needs.code-quality.result == 'success'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist pytest-mock
        pip install -r requirements.txt
        pip install -r requirements/web_requirements.txt
        
    - name: Set up test environment
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        # Initialize test database
        python -c "
        from web_interface.models import db
        from web_interface.app import create_app
        app = create_app()
        with app.app_context():
            db.create_all()
        "
        
    - name: Run Unit Tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        pytest tests/unit/ -v --cov=fm_llm_solver --cov-report=xml --cov-report=term
        
    - name: Run Integration Tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        pytest tests/integration/ -v --maxfail=5
        
    - name: Run User Account System Tests
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key-for-ci
        FLASK_ENV: testing
      run: |
        pytest tests/test_user_account_system.py -v
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==================== SECURITY SCANNING ====================
  
  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      security-events: write
      actions: read
      contents: read
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==================== BUILD & PACKAGE ====================
  
  build-and-push:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: [test-matrix, security-scan]
    if: always() && needs.test-matrix.result == 'success' && needs.security-scan.result == 'success'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: web
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ steps.meta.outputs.tags }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  # ==================== ENVIRONMENT DEPLOYMENTS ====================
  
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    environment: 
      name: development
      url: https://dev.fm-llm-solver.com
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Development Environment
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_DEV }}
        DATABASE_URL: ${{ secrets.DEV_DATABASE_URL }}
        REDIS_URL: ${{ secrets.DEV_REDIS_URL }}
      run: |
        echo "Deploying to Development Environment"
        echo "Image: $IMAGE_TAG"
        
        # Set up kubectl
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Update deployment manifests
        sed -i "s|image: fm-llm-solver:web|image: $IMAGE_TAG|g" deployment/kubernetes/web-app.yaml
        
        # Apply to development namespace
        kubectl apply -f deployment/kubernetes/ -n fm-llm-solver-dev
        
        # Wait for rollout
        kubectl rollout status deployment/fm-llm-solver-web -n fm-llm-solver-dev --timeout=300s
        
    - name: Run Deployment Tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run smoke tests
        curl -f https://dev.fm-llm-solver.com/health || exit 1
        curl -f https://dev.fm-llm-solver.com/api/health || exit 1
        
    - name: Notify Development Team
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#development'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.fm-llm-solver.com
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Staging Environment
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
      run: |
        echo "Deploying to Staging Environment"
        echo "Image: $IMAGE_TAG"
        
        # Set up kubectl
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Update deployment manifests
        sed -i "s|image: fm-llm-solver:web|image: $IMAGE_TAG|g" deployment/kubernetes/web-app.yaml
        
        # Apply to staging namespace
        kubectl apply -f deployment/kubernetes/ -n fm-llm-solver-staging
        
        # Wait for rollout
        kubectl rollout status deployment/fm-llm-solver-web -n fm-llm-solver-staging --timeout=300s
        
    - name: Run E2E Tests
      run: |
        # Wait for service to be ready
        sleep 30
        
        # Run comprehensive E2E tests
        ./scripts/pre-deployment-test.sh https://staging.fm-llm-solver.com
        
    - name: Performance Testing
      run: |
        # Run load tests
        npx playwright test --config=tests/performance/playwright.config.js
        
    - name: Notify QA Team
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#qa'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://fm-llm-solver.com
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Pre-deployment Checks
      run: |
        echo "Running pre-deployment validation..."
        
        # Verify all previous environments are healthy
        curl -f https://staging.fm-llm-solver.com/health || exit 1
        
        # Check if this is a hotfix or regular deployment
        if [[ "${{ github.event.head_commit.message }}" == *"hotfix"* ]]; then
          echo "HOTFIX_DEPLOYMENT=true" >> $GITHUB_ENV
        fi
        
    - name: Blue-Green Deployment Setup
      env:
        IMAGE_TAG: ${{ needs.build-and-push.outputs.image-tag }}
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PROD }}
      run: |
        echo "Setting up Blue-Green Deployment"
        echo "Image: $IMAGE_TAG"
        
        # Set up kubectl
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        export KUBECONFIG=./kubeconfig
        
        # Create green deployment
        sed -i "s|image: fm-llm-solver:web|image: $IMAGE_TAG|g" deployment/kubernetes/web-app.yaml
        sed -i "s|name: fm-llm-solver-web|name: fm-llm-solver-web-green|g" deployment/kubernetes/web-app.yaml
        
        # Deploy green environment
        kubectl apply -f deployment/kubernetes/web-app.yaml -n fm-llm-solver-prod
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/fm-llm-solver-web-green -n fm-llm-solver-prod --timeout=600s
        
    - name: Health Check Green Environment
      run: |
        # Get green service endpoint
        export KUBECONFIG=./kubeconfig
        GREEN_ENDPOINT=$(kubectl get service fm-llm-solver-web-green-service -n fm-llm-solver-prod -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # Wait for service to be ready
        sleep 60
        
        # Run comprehensive health checks
        curl -f http://$GREEN_ENDPOINT:5000/health || exit 1
        curl -f http://$GREEN_ENDPOINT:5000/api/health || exit 1
        
        # Run production readiness tests
        ./scripts/final-deployment-test.sh http://$GREEN_ENDPOINT:5000
        
    - name: Switch Traffic to Green
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Update service to point to green deployment
        kubectl patch service fm-llm-solver-web-service -n fm-llm-solver-prod -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Verify traffic switch
        sleep 30
        curl -f https://fm-llm-solver.com/health || exit 1
        
    - name: Cleanup Blue Environment
      run: |
        export KUBECONFIG=./kubeconfig
        
        # Scale down blue deployment
        kubectl scale deployment fm-llm-solver-web -n fm-llm-solver-prod --replicas=0
        
        # Keep blue for 24h for potential rollback
        kubectl annotate deployment fm-llm-solver-web -n fm-llm-solver-prod \
          "cleanup-after=$(date -d '+24 hours' -Iseconds)"
        
    - name: Post-deployment Monitoring
      run: |
        # Wait and monitor for issues
        sleep 300
        
        # Check error rates and performance
        curl -f https://fm-llm-solver.com/api/metrics || exit 1
        
        # Verify user account system
        curl -f https://fm-llm-solver.com/auth/health || exit 1
        
    - name: Update Release Notes
      uses: release-drafter/release-drafter@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Notify Success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚀 Production Deployment Successful!
          
          Image: ${{ needs.build-and-push.outputs.image-tag }}
          URL: https://fm-llm-solver.com
          Commit: ${{ github.sha }}
          
          All systems operational ✅

  # ==================== ROLLBACK MECHANISM ====================
  
  emergency-rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: deploy-production
    environment:
      name: production
      
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Rollback to Blue Environment
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PROD }}
      run: |
        echo "EMERGENCY ROLLBACK INITIATED"
        export KUBECONFIG=./kubeconfig
        echo "$KUBE_CONFIG" | base64 -d > kubeconfig
        
        # Switch back to blue deployment
        kubectl patch service fm-llm-solver-web-service -n fm-llm-solver-prod -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # Scale up blue deployment
        kubectl scale deployment fm-llm-solver-web -n fm-llm-solver-prod --replicas=3
        
        # Wait for blue to be ready
        kubectl rollout status deployment/fm-llm-solver-web -n fm-llm-solver-prod --timeout=300s
        
        # Verify rollback
        sleep 30
        curl -f https://fm-llm-solver.com/health || exit 1
        
    - name: Notify Emergency Team
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: failure
        channel: '#emergency'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          🚨 EMERGENCY ROLLBACK EXECUTED 🚨
          
          Failed deployment has been rolled back to previous version.
          Immediate investigation required!
          
          Incident: ${{ github.sha }}
          Time: ${{ github.event.head_commit.timestamp }}

  # ==================== CLEANUP & MONITORING ====================
  
  post-deployment-cleanup:
    name: Post-deployment Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        echo "Cleaning up old container images..."
        # Keep last 10 images
        
    - name: Update monitoring dashboards
      run: |
        echo "Updating Grafana dashboards with latest deployment info..."
        
    - name: Generate deployment report
      run: |
        echo "# Deployment Report" > deployment-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
        echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
        echo "- **Image**: ${{ needs.build-and-push.outputs.image-tag }}" >> deployment-report.md
        echo "- **Timestamp**: $(date -Iseconds)" >> deployment-report.md
        
    - name: Archive deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts
        path: |
          deployment-report.md
          kubeconfig 